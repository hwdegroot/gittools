#!/usr/bin/env bash

function parse_args {
  ARGS=()
  while [ $# -gt 0 ]; do
    OPTARG="$2"
    OPTION="$1"
    DO_SHIFT=1

    IFS='=' read -ra OPT <<< "$OPTION"

    if [[ "${#OPT[*]}" == "2" ]]; then
      DO_SHIFT=0
      OPTARG="${OPT[1],,}"
      OPTION="${OPT[0]}"
    fi
      case "$OPTION" in
      -r|--repository)
        REPORC=$OPTARG
        [[ "$DO_SHIFT" = "1" ]] && shift
        ;;
      -b|--branch)
        BRANCH=$OPTARG
        [[ "$DO_SHIFT" = "1" ]] && shift
        ;;
      -h|--help)
          usage
        ;;
      *)
        ARGS+=($OPTION)
        ;;
    esac
    shift
  done
}

function set_defaults {
  parse_args $*
  set_repos "$REPORC"
}

function set_repos {
  local REPORC="$1"

  if [[ -z "$REPORC" && -n "$(get_repo "${ARGS[@]}")" ]]; then
    REPORC="$(get_repo "${ARGS[@]}")"
    ARGS=("${ARGS[@]:1}")
  fi

  REPORC=${REPORC:-"$GITTOOLS/.reporc"}
  CURR_DIR=$(pwd)
  BASEDIR=$CURR_DIR

  if [[ -f "$REPORC" ]]; then 
    BASEDIR=$(dirname "$REPORC")
    # readfile
    REPOS=()
    while read line
    do
      [[ -n ${line// /} && ! -z "$(cd $BASEDIR && [[ -d "$line" ]] && echo "DIR_EXISTS")" ]] && REPOS+=($(cd $BASEDIR && cd $line && pwd))
    done < "$REPORC"
    return
  fi

  [[ ! -d  "$REPORC" ]] && >&2 echo "Unable to locate repository file" && exit 1

  REPO_PATH=$(expand_path "$REPORC")
  if [[ -d "$REPO_PATH" ]] && [[ ! -z "$(cd $REPO_PATH && git rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
    REPOS=("$REPORC")
    BASEDIR=$CURR_DIR
    return
  fi
  >&2 echo "Unable to locate repository file" && exit 1 
}


function expand_path {
    [[ -z "${1// /}" ]] || [[ ! -d "$1" ]] && >&2 echo "Unable to locate repository file $1" && return

    echo $(cd "$1" && pwd)
}

function get_additional_arg {
  ARG="$1"
  local RESULT
  if [[ " ${ARGS[@]} " =~ " $ARG " ]]; then
    ARGS=(${ARGS[@]/"$ARG"})
    RESULT=1
  fi
  [[ -n "$2" ]] && eval "$2=$RESULT"
  return $RESULT
}

function get_repo {
  local args=("$@")
  [[ ${#args[@]} -gt 0 ]] && [[ -d "${args[0]}" || -f "${args[0]}" ]] && echo "${args[0]}" 
  return
}

function error {
  if [[ -n "$1" ]]; then
    VAL="$1"
  else
    read VAL
  fi
  [[ -z $VAL ]] && return
  TS=$(date +%H:%M)
  echo -e " $TS \e[01;31mERROR: ${VAL}\e[0m"
}

function info {
  if [[ -n "$1" ]]; then
    VAL="$1"
  else
    read VAL
  fi
  [[ -z $VAL ]] && return
  TS=$(date +%H:%M)
  echo -e " $TS \e[01;94mINFO:\e[0m ${VAL}"
}

function success {
  if [[ -n "$1" ]]; then
    VAL="$1"
  else
    read VAL
  fi
  [[ -z $VAL ]] && return
  TS=$(date +%H:%M)
  echo -e " $TS \e[01;32mSUCCESS\e[0m ${VAL}"
}

function warn {
  if [[ -n "$1" ]]; then
    VAL="$1"
  else
    read VAL
  fi
  [[ -z $VAL ]] && return
  TS=$(date +%H:%M)
  echo -e " $TS \e[01;33mWARNING\e[0m ${VAL}"
}

function loose_set_repo {
  local args=("$@")
  if [[ -n "$(get_repo "${args[@]}")" ]]; then
    set_repos "$(get_repo "${args[@]}")"
    ARGS=("${args[@]:1}")
  fi
}

set_defaults $*
