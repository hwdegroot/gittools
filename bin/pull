#!/usr/bin/env bash

function usage {
  echo "SYNOPSIS: $0 [options]"
  echo "  Pull all repos"
  echo ""
  echo "  options:"
  echo "     -r <repofile|repodir>, --repository=<repofile|repodir> :"
  echo "       A file with all repos relative to script"
  echo "       defaults to \$DEVTOOLDIR/.reporc"
  echo "     --preserve-merges :"
  echo "       Do a rebase after pull and preserve merges"
  echo "       Same as \`git fetch && git rebase --preserve-merges\`"
  echo "     --rebase :"
  echo "       Do a rebase after pull"
  echo "       Same as \`git fetch && git rebase\`"

  exit 1
}

BASEPATH=$(dirname "$0")
source "$BASEPATH/.functions"

get_additional_arg "--preserve-merges" "DO_PRESERVE_MERGE"
get_additional_arg "--rebase" "DO_REBASE"

loose_set_repo "${ARGS[@]}"

for REPO in "${REPOS[@]}"
do
  (
    [[ -z "${REPO// /}" ]] && continue

    REPODIR=$(expand_path "$REPO")
    [[ ! -d "$REPODIR" ]] && continue

    cd "$REPODIR"
    git rev-parse --is-inside-work-tree 2>&1>/dev/null || continue

    BASENAME=$(basename $(pwd))
    if [[ "${DO_REBASE:-"$DO_PRESERVE_MERGE"}" -eq "1" ]]; then
      info "[$BASENAME] Fetching changes from remote..."
      git fetch 2>&1 | error
      ARGV=()
      [[ "$DO_PRESERVE_MERGE" -eq "1" ]] && ARGV+=("--preserve-merges")
      ARGV+=(${ARGS[*]})

      info "[$BASENAME] Rebasing local changes on top..."
      git rebase ${ARGV[@]} 2>&1 | error

    else
      info "[$BASENAME] Pulling changes from remote..."
      git pull ${ARGS[@]} 2>&1 | error
    fi
    cd "$CURR_DIR"
  )
done
